plugins {
    id 'java'
    id 'application'
}

group = 'com.github.jtam2000'
version = '1.0.1'
mainClassName = "${group}.package1.HelloWorld"

ext {
    groupPrefix = "${group}"
    mainClassName2 = "${group}.package2.HelloWorldTwo"

}

repositories {
    mavenCentral()
    maven {
        url "https://packages.confluent.io/maven/"
    }
}

dependencies {
    implementation 'org.apache.commons:commons-math3:3.6.1',
            'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1',
            'org.apache.avro:avro:1.9.2',
            'org.apache.kafka:kafka-clients:0.10.0.1',
            'io.confluent:kafka-avro-serializer:5.3.0'

    testImplementation 'junit:junit:4.12',
            'org.apache.commons:commons-math3:3.6.1',
            'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1',
            'org.apache.avro:avro:1.9.2',
            'org.apache.kafka:kafka-clients:0.10.0.1',
            'org.slf4j:slf4j-nop:1.7.25',
            'io.confluent:kafka-avro-serializer:5.3.0'
}

jar {
    manifest {
        attributes(
                'Main-Class': "${mainClassName}"
        )
    }
}

application {
    mainClassName = "${mainClassName}"
}

task runApp2(type: JavaExec) {

    description = "Run the second app"
    classpath = sourceSets.main.runtimeClasspath
    main = "${groupPrefix}.package2.HelloWorldTwo"
}

task avroSchemaGenCode(type: Exec) {

    description = "Generate Java files for Avro Schema changes"

    def AVRO_TOOl = '/usr/local/bin/avro-tools'
    def PROJ_AVRO_ROOT = 'src/main/resources/avro'
    def PROJ_AVRO_JAVA_CODE_DIR = 'src/main/java'
    def schema_file = "$PROJ_AVRO_ROOT/avroSchema.avsc"

    inputs.file(schema_file)

    commandLine "$AVRO_TOOl", "compile", "schema",
            "$schema_file",
            "$PROJ_AVRO_JAVA_CODE_DIR"
}